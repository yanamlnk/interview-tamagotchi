
plugins {
    id 'application'
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.mockito:mockito-core:3.12.4'

    // This dependency is used by the application.
    implementation libs.guava

    //for JavaFX UI enhancements
    implementation 'org.openjfx:javafx-controls:17'
    implementation 'org.openjfx:javafx-graphics:17'
    implementation 'org.openjfx:javafx-base:17'
    implementation 'org.openjfx:javafx-fxml:17'
    implementation 'org.openjfx:javafx-media:17'

    //to work with json files
    implementation 'com.google.code.gson:gson:2.8.9'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass = 'io.tamagotchi.App'
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base','javafx.media' ]
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

jacocoTestReport {
    dependsOn test
}

javadoc {
    options.addStringOption('private', '-private')
}

jar {
    archiveBaseName.set("PrepPal-light")

    manifest {
        attributes(
                'Main-Class': 'io.tamagotchi.App'
        )
    }
}

shadowJar {
    archiveBaseName.set("PrepPal")
    archiveClassifier.set("")
    manifest {
        attributes(
                'Main-Class': 'io.tamagotchi.App'
        )
    }
}

tasks.distZip {
    dependsOn shadowJar
}

tasks.distTar {
    dependsOn shadowJar
}

tasks.startScripts {
    dependsOn shadowJar
}

tasks.startShadowScripts {
    dependsOn shadowJar
    dependsOn jar
}

sourceSets.main.resources.srcDirs = ['src/main/resources']
